"        _                    
" __   _(_)_ __ ___  _ __ ___ 
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__ 
"   \_/ |_|_| |_| |_|_|  \___|
"                             


" +----------------------------------------------------------------------------+
" | Plugins                                                                    |
" +----------------------------------------------------------------------------+
let g:pathogen_disabled = []
let extension = expand('%:e')

" Enable supertab only in C files/projects
if (extension!='c')
    call add(g:pathogen_disabled, 'supertab')
endif

" Disable emmet in C files/projects
if (extension=='c')
    call add(g:pathogen_disabled, 'emmet-vim')
endif

execute pathogen#infect()

" +----------------------------------------------+
" |  vim-notes                                   |
" +----------------------------------------------+
let g:notes_directories = ['~/.dotfiles/.vim/notes']

map <leader>n  :Note
map <leader>sn :SearchNotes

" +----------------------------------------------+
" |  quick-scope                                 |
" +----------------------------------------------+
" QuickScope: Trigger in the appropriate direction only when pressing keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
"
" +----------------------------------------------+
" |  Fugitive                                    |
" +----------------------------------------------+
map <Leader>gb :Gblame<CR>

" +----------------------------------------------+
" |  Emmet                                       |
" +----------------------------------------------+
" Use emmet intelligent expand
imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

" Only use emmet in insert mode
let g:user_emmet_mode='i'

" Remap emmet leader key
let g:user_emmet_leader_key='<leader>='

" +----------------------------------------------+
" |  FZF                                         |
" +----------------------------------------------+
" Function to prevent FZF from taking up NERDtree's split
function! FZFOpen(command_str)
  if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
    :winc l
  endif
  exe 'normal! ' . a:command_str . "\<cr>"
endfunction

" Call FZF on files/buffers with C-p/C-l
nnoremap <silent> <C-l> :call FZFOpen(':Buffers')<CR>
nnoremap <silent> <C-p> :call FZFOpen(":call fzf#run({'sink': 'e', 'source': 'fd -H -t f -E .git', 'down': '30%'})")<CR>
nnoremap <silent> <leader>gl :call FZFOpen(':BLines')<CR>

" Search files contents
map <C-f> :Find<space>

command! -bang -nargs=* Find call fzf#vim#grep( 'rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --color "always" '.shellescape(<q-args>), 1, <bang>0)

" +----------------------------------------------+
" |  gitgutter                                   |
" +----------------------------------------------+
nmap <leader>gs <Plug>GitGutterStageHunk
nmap <leader>gu <Plug>GitGutterUndoHunk
nmap <leader>gp <Plug>GitGutterPreviewHunk

" +----------------------------------------------+
" |  NERDTree                                    |
" +----------------------------------------------+
" Mapping to toggle NERDTree
map <C-n> :MBEOpen<CR>:NERDTreeToggle<CR>:winc l<CR>

" Find current file in tree
map <leader>f :NERDTreeFind<CR>

" NERDtree git symbols
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "+",
    \ "Staged"    : "S",
    \ "Untracked" : "U",
    \ "Renamed"   : "R",
    \ "Unmerged"  : "x",
    \ "Deleted"   : "-",
    \ "Dirty"     : "~",
    \ "Clean"     : "C",
    \ 'Ignored'   : 'I',
    \ "Unknown"   : "?"
    \ }

" +----------------------------------------------------------------------------+
" | Mappings                                                                   |
" +----------------------------------------------------------------------------+

" +----------------------------------------------+
" |  Normal                                      |
" +----------------------------------------------+
" Use <space> as <leader>
map <space> \

" Don't use Ex mode, use Q for formatting
map Q gq

" EOL Semicolon
noremap <C-m> A;<Esc>

" Move current line up/down
" nnoremap <C-j> :m .+1<CR>==
" nnoremap <C-k> :m .-2<CR>==

" Join lines
nnoremap <C-j> :join<CR>

" +----------------------------------------------+
" |  Insert                                      |
" +----------------------------------------------+
" jk/kj to leave insert mode
inoremap jk <esc>
inoremap kj <esc>

" +----------------------------------------------+
" |  Visual                                      |
" +----------------------------------------------+
" Tab to indent
vmap <Tab> >

" Move current line(s) up/down
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" +----------------------------------------------+
" |  Other mappings                              |
" +----------------------------------------------+
" Buffer navigation
nnoremap J     :bp<CR>
nnoremap K     :bn<CR>
nnoremap <C-w> :BD<CR>
nnoremap g$    :blast<CR>
nnoremap g0    :bfirst<CR>

inoremap <C-w> <Esc>:BD<CR>

nnoremap gb :buffers<CR>:buffer<Space>
nnoremap <C-b> :BufOnly<CR>

" Tab navigation
nnoremap <C-t>     :tabnew<CR>
nnoremap <C-g>     :tabmove -1<CR>
nnoremap <C-h>     :tabmove +1<CR>

inoremap <C-t>     <Esc>:tabnew<CR>
inoremap <C-g>     <Esc>:tabmove -1<CR>
inoremap <C-h>     <Esc>:tabmove +1<CR>

" Use leader to work splits
map <leader>h :winc h<CR>
map <leader>j :winc j<CR>
map <leader>k :winc k<CR>
map <leader>l :winc l<CR>
map <leader>s :winc s<CR>
map <leader>v :winc v<CR>
map <leader>H :winc H<CR>
map <leader>J :winc J<CR>
map <leader>K :winc K<CR>
map <leader>L :winc L<CR>
map <leader>S :winc S<CR>
map <leader>V :winc V<CR>


" +----------------------------------------------------------------------------+
" | Settings                                                                   |
" +----------------------------------------------------------------------------+
set history=50             " Keep 50 lines of command line history
set ruler                  " Show the cursor position at all time
set showcmd                " Display incomplete commands
set incsearch              " Do incremental searching
set ruler                  " Rulers
set number                 " Line numbers
set scrolloff=4            " Keep cursor visible within 4 lines
set whichwrap=h,l          " h and l wrap around lines
set clipboard=unnamedplus  " Auto use the system clipboard
set updatetime=750         " Idle time before changes written to swap file
set hlsearch               " Highlight search results
set cursorline             " Highlight active line
set cursorcolumn           " Highlight active column
set expandtab              " Use spaces when inserting <Tab>
set tabstop=4              " Number of spaces a <Tab> counts for
set softtabstop=4          " Number of spaces a <Tab> counts for while editing
set shiftwidth=4           " Number of spaces an entered <Tab> will translate to
set rtp+=~/.fzf            " Use fzf
set hidden                 " Enable to move between buffers without saving

set backspace=indent,eol,start " Allow backspace over all in insert mode


" +----------------------------------------------------------------------------+
" | Colors and customization                                                   |
" +----------------------------------------------------------------------------+
" Activate syntax
set t_Co=256
syntax on
colorscheme jellybeans

" Color column
" 50 (Git commit) - 80 (Code)
let &colorcolumn=join(range(51,80),",")
highlight ColorColumn ctermbg=235 guibg=#2c2d27

" Status line
set statusline=%f\        " Filename
set statusline+=%y\       " Filetype of the file
set statusline+=%c        " Column number


" +----------------------------------------------------------------------------+
" | C programming                                                              |
" +----------------------------------------------------------------------------+
" Save and compile current file
function C_compile_file()
    w
    !gcc -g %
endfunction

map <leader>gc :call C_compile_file()

" Single line C comment
imap <C-_> /**/jkhi<space><space>jki

" Multi line C comment
imap <C-n> /*<Enter><Enter><Backspace>/jkkA<space>


" +----------------------------------------------------------------------------+
" | From defaults                                                              |
" +----------------------------------------------------------------------------+
" Only when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") >= 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langnoremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If unset (default), this may break plugins (but it's backward
  " compatible).
  set langnoremap
endif


" +----------------------------------------------------------------------------+
" | Other                                                                      |
" +----------------------------------------------------------------------------+
" Recognize custom file extensions as shell scripts
autocmd BufRead,BufNewFile .bash_* set filetype=sh
