#!/usr/bin/bash

# Uses GITLAB_BASE env variable

# Check GitLab private token
if [ -z "$1" ]
then
    echo "Usage: mirrorGl <GITLAB_PRIVATE_TOKEN> <GROUP_ID|URL-encoded path> <prefix>"
    echo "'prefix' will strip the given prefix from the destination path(s)"
    echo "example: if prefix is 'ecom/jupiter' and project path is 'ecom/jupiter/symfony/lambda-bundle'"
    echo "         the local destination path will be '$(pwd)/symfony/lambda-bundle'"
    exit
fi

# Set group ID
if [ -z "$2" ]
then
    echo "Usage: mirrorGl <GITLAB_PRIVATE_TOKEN> <GROUP_ID|URL-encoded path> <prefix>"
    echo "'prefix' will strip the given prefix from the destination path(s)"
    echo "example: if prefix is 'ecom/jupiter' and project path is 'ecom/jupiter/symfony/lambda-bundle'"
    echo "         the local destination path will be '$(pwd)/symfony/lambda-bundle'"
    exit
fi

# Set prefix
prefix=""
if [ -n "$3" ]
then
    prefix=$3
fi

repoList=$(curl -s --header "PRIVATE-TOKEN: $1" "${GITLAB_BASE}/api/v4/groups/${2}/projects?include_subgroups=true&per_page=100&archived=false" | jq -c -r ".[]")

# Make newslines the only separator
IFS=$'\n'

# Loop every repo JSON
for repo in $repoList; do

    _jq() {
        echo ${repo} | jq -r ${1}
    }

    repoPath=$(_jq '.path_with_namespace')
    repoSsh=$(_jq '.ssh_url_to_repo')

    # Trim destination prefix if needed
    if [ -n "$2" ]
    then
        repoPathFinal=${repoPath#"$prefix"}
    else
        repoPathFinal=${repoPath}
    fi

    mkdir -p $repoPathFinal
    cd $repoPathFinal

    # Clone
    pwd
    git clone $repoSsh .
    cd -
    echo "================================================================================================================================================"
done

