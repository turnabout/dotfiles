#  _               _               _ _   
# | |__   __ _ ___| |__       __ _(_) |_ 
# | '_ \ / _` / __| '_ \     / _` | | __|
# | |_) | (_| \__ \ | | |   | (_| | | |_ 
# |_.__/ \__,_|___/_| |_|____\__, |_|\__|
#                      |_____|___/       


# +----------------------------------------------------------------------------+
# | Aliases                                                                    |
# +----------------------------------------------------------------------------+
alias gs="git status"
alias gc="git checkout"
alias gc-="git checkout - && clear"
alias gcn="git checkout -b "
alias ga="git add -A && git commit"
alias gd="git diff"
alias gpr="git pull --rebase"
alias grh="git reset --hard"
alias gru="git remote update"
alias repofiles="git ls-files-root --cached --others --exclude-standard"
alias nukeshit="git branch --merged| egrep -v \"(^\*|master|develop)\" | xargs git branch -d"
alias gb="git branch"
alias gcm="git commit"
alias gsp="git stash pop"
alias gst="git stash"
alias grv="git remote -v"
alias grc="git rebase --continue"
alias ga.="git add ."
alias gad="git add"
alias gcml="git commit --amend --no-edit"
alias gcp="git cherry-pick"


# +----------------------------------------------------------------------------+
# | Functions                                                                  |
# +----------------------------------------------------------------------------+

# Git push current branch
function gp() {
    branch_name="$(git symbolic-ref HEAD 2>/dev/null --short)"
    git push -u origin "${branch_name}"
}

# Git add all & push
function gap() {
    ga && gp
}

# Git log shortcut
function gl() {
    if [ ${1} ]; then 
        git log -${1}
    else
        git log
    fi
}

# Amend previous commit with all current changes - "Git AMend Last"
function gaml() {
    git add .
    git commit --amend --no-edit
}

# Same as "gaml" but without "git add ."
function gcml() {
    git commit --amend --no-edit
}

# View changes introduced by a single commit - "Git CHanges"
function gch() {
    git diff ${1}~ ${1}
}

# Generate lists of commit messages with certain substring + their authors
function cmgrep() {
    git log --grep="${1}" --pretty="format:%an:%B" | sed '/^[[:space:]]*$/d' | grep ${1} > ${1}-commits
    git log --grep="${1}" --pretty="format:%an" > ${1}-authors
    cat ${1}-authors | grep -v "^\s*$" | sort | uniq -c | sort -bnr > ${1}-leaderboard
    cat ${1}-commits | wc -l
}

# Refresh the default branch
function ref() {
    branch_name=$(git remote show origin  | grep "HEAD branch" | cut -d ":" -f 2)
    git checkout $branch_name && gpr && nukeshit
}


# +----------------------------------------------------------------------------+
# | Git branch in prompt                                                       |
# +----------------------------------------------------------------------------+

# Colors
red="\033[0;31m"
white="\033[0;37m"
green="\033[0;32m"

# Brackets needed around non-printable characters in PS1
ps1_red='\['"$red"'\]'
ps1_green='\['"$green"'\]'
ps1_white='\['"$white"'\]'

# Print the branch name and status to be displayed in the command line prompt
function parse_git_branch() {
    gitstatus=`git status 2> /dev/null`
    if [[ `echo $gitstatus | grep "Changes to be committed"` != "" ]]
    then
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1***)/'
    elif [[ `echo $gitstatus | grep "Changes not staged for commit"` != "" ]]
    then
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1**)/'
    elif [[ `echo $gitstatus | grep "Untracked"` != "" ]]
    then
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1*)/'
    elif [[ `echo $gitstatus | grep "nothing to commit"` != "" ]]
    then
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
    else
        git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1?)/'
    fi
}

# Echo a non-printing color character depending on whether or not the current git branch is the master    
# Does NOT print the branch name                                                                          
# Use the parse_git_branch() function for that.                                                           
function parse_git_branch_color() {
    br=$(parse_git_branch)
    if [[ $br == "(master)" || $br == "(master*)" || $br == "(master**)" || $br == "(master***)" ]]; then
        echo -e "${red}"
    else
        echo -e "${green}"
    fi
}

export PS1="$ps1_red\u:$ps1_white\W\[\$(parse_git_branch_color)\]\$(parse_git_branch) $ps1_red\$$ps1_white "
